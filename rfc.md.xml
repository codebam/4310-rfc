<?xml version="1.0" encoding="utf-8"?>
<!-- name="GENERATOR" content="github.com/mmarkdown/mmark Mmark Markdown Processor - mmark.miek.nl" -->
<rfc version="3" ipr="trust200902" docName="1407" submissionType="IETF" category="exp" xml:lang="en" xmlns:xi="http://www.w3.org/2001/XInclude" consensus="true" number="1407">

<front>
<title abbrev="FC">FooChat 2.0</title><seriesInfo value="1407" stream="IETF" status="experimental" name="RFC"></seriesInfo>
<author initials="S. B., K. D. S." surname="Behan, Dsane-Selby" fullname="Sean Behan, Kevin Dsane-Selby"><organization></organization><address><postal><street></street>
</postal></address></author>
<date/>
<area>Internet</area>
<workgroup>Network Working Group</workgroup>

<abstract>
<t>There were not enough chat protocols, FooChat allows seamless communication
between clients and servers. The simplicity of this protocol makes it a good
example for low level networking.</t>
</abstract>

</front>

<middle>

<section anchor="introduction"><name>Introduction</name>
<t>Most chat protocols are very complex and require unncessary bandwidth being
used. FooChat solves this problem by implementing a simple protocol for
communication that is also bandwidth efficient.</t>

<section anchor="servers"><name>Servers</name>
<t>The server of FC, provides a point to which clients may connect to to
communicate with each other.</t>
</section>

<section anchor="clients"><name>Clients</name>
<t>Clients of FC connect to a central server in which they can communicate and
send messages to other clients.</t>
</section>

<section anchor="terminology"><name>Terminology</name>
<t>The keywords <bcp14>MUST</bcp14>, <bcp14>MUST NOT</bcp14>, <bcp14>REQUIRED</bcp14>, <bcp14>SHALL</bcp14>, <bcp14>SHALL NOT</bcp14>, <bcp14>SHOULD</bcp14>,
<bcp14>SHOULD NOT</bcp14>, <bcp14>RECOMMENDED</bcp14>, <bcp14>MAY</bcp14>, and <bcp14>OPTIONAL</bcp14>, when they appear in this
document, are to be interpreted as described in <xref target="RFC2119"></xref>.</t>
</section>
</section>

<section anchor="the-fc-specification"><name>The FC Specification</name>

<section anchor="overview"><name>Overview</name>
<t>The FC protocol as described is for use for client to server connections.</t>
</section>

<section anchor="packet-format"><name>Packet format</name>
<t>Each packet is sent in the JSON format outlined in <xref target="RFC8259"></xref>.</t>
<t>The packet structure is as follows.</t>

<artwork align="left">{ 
  &quot;number&quot;: 1,
  &quot;version&quot;: 1,
  &quot;from&quot;: &quot;alice&quot;,
  &quot;to&quot;: &quot;bob&quot;,
  &quot;verb&quot; &quot;SEND&quot;,
  &quot;data&quot;: &quot;hello bob, how are you?&quot;,
  &quot;checksum&quot;: &quot;d4337b8c43aceb0567fbd4ccd09b330727120e0e96856caa6d8da6dba64ba07d&quot;
}
</artwork>
</section>

<section anchor="connecting-to-the-server"><name>Connecting to the server</name>
<t>Clients <bcp14>MUST</bcp14> connect to the server using TCP packets. Clients <bcp14>MUST</bcp14> also
connect on port <strong>682651</strong>.</t>
<t>To initiate a connection clients <bcp14>SHALL</bcp14> send a TCP packet containing the
message LOGN, a username, and a code version number.</t>
<t>The server <bcp14>SHALL</bcp14> acknowledge the login by sending a TCP packet containing
SUCC, the user id.</t>
<t>The connection is made as follows:</t>

<artwork align="left">Client -&gt; Server
{ 
  &quot;number&quot;: 1,
  &quot;version&quot;: 1,
  &quot;from&quot;: &quot;alice&quot;,
  &quot;verb&quot; &quot;LOGN&quot;,
}

Server -&gt; Client
{ 
  &quot;number&quot;: 2,
  &quot;verb&quot; &quot;SUCC&quot;,
}
</artwork>
</section>

<section anchor="disconnecting-from-the-server"><name>Disconnecting from the server</name>
<t>Clients <bcp14>SHOULD</bcp14> send a DISC (disconnect) message when disconnecting from the
server.</t>

<artwork align="left">Client -&gt; Server
{
  &quot;number&quot;: 3,
  &quot;from&quot;: &quot;alice&quot;,
  &quot;verb&quot; &quot;DISC&quot;,
}
</artwork>
</section>

<section anchor="sending-messages"><name>Sending messages</name>
<t>Clients send messages by sending TCP packets with the destination username as
well as the message that you want to send.</t>
<t>Example:</t>

<artwork align="left">Client -&gt; Server
{
  &quot;number&quot;: 4,
  &quot;from&quot;: &quot;alice&quot;,
  &quot;to&quot;: &quot;bob&quot;,
  &quot;verb&quot; &quot;SEND&quot;,
  &quot;data&quot;: &quot;hello bob&quot;
}
</artwork>
</section>

<section anchor="sending-messages-to-all-clients"><name>Sending messages to all clients</name>
<t>If messages are sent with a verb of SALL, that message will be broadcast to
all other clients connected to the server.</t>

<artwork align="left">Client -&gt; Server
{
  &quot;number&quot;: 5,
  &quot;from&quot;: &quot;alice&quot;,
  &quot;verb&quot; &quot;SALL&quot;,
  &quot;data&quot;: &quot;message to all clients&quot;
}
</artwork>
</section>

<section anchor="receiving-messages"><name>Receiving messages</name>
<t>Clients implement a receive method such that they are able to recieve and
display incoming messages.</t>
<t>Example:</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 6,
  &quot;from&quot;: &quot;bob&quot;,
  &quot;verb&quot; &quot;RECV&quot;,
  &quot;data&quot;: &quot;good thanks, how are you?&quot;
}
</artwork>
</section>

<section anchor="server-broadcasts"><name>Server broadcasts</name>
<t>When a new client connects to the server, the server will broadcast a message
to all clients telling them the username of all connected clients. It is the
clients job to keep track of connected clients.</t>
<t>The data field holds a JSON array of all clients that are connected.</t>
<t>Example:</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 7,
  &quot;verb&quot; &quot;CONN&quot;,
  &quot;data&quot;: {[&quot;alice&quot;, &quot;bob&quot;]}
}
</artwork>
<t>When a client disconnects from the server the server will broadcast a message
containing the ID of the disconnecting client. It is up to clients to remove
the disconnecting client from their list of active clients.</t>
<t>Example:</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 8,
  &quot;verb&quot; &quot;DISC&quot;,
  &quot;data&quot;: &quot;alice&quot;
}
</artwork>
</section>

<section anchor="getting-a-list-of-connected-clients"><name>Getting a list of connected clients</name>
<t>If clients send a message containing WHOO the server <bcp14>SHOULD</bcp14> send a response
with all currently connected clients. It is then up to the client to update
it's list of currently connected users.</t>
<t>The data field holds a JSON array of all clients that are connected.</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 9,
  &quot;verb&quot; &quot;CONN&quot;,
  &quot;data&quot;: {[&quot;bob&quot;, &quot;abc&quot;]}
}
</artwork>
</section>

<section anchor="checksums"><name>Checksums</name>
<t>Each packet being sent should contain a checksum field with the checksum of all
the data in the data field of the packet. The checksum must be in SHA256 format.</t>
<t>Example is shown below.</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 9,
  &quot;verb&quot; &quot;CONN&quot;,
  &quot;data&quot;: {[&quot;bob&quot;, &quot;abc&quot;]}
  &quot;checksum&quot;: &quot;0ad320defb0ee98b2b7500589ed330393e9e5791e2a9d1f3e66f519a83fe0830&quot;
}
</artwork>
</section>

<section anchor="requesting-a-packet-to-be-resent"><name>Requesting a packet to be resent</name>
<t>If the server or client does not validate the packet checksum successfully or
didn't recieve a packet it may request that packet to be resent by sending a
RESEND packet where the data field contains the packet number that should be
resent. The original packet will be sent back with no modifications aside from
the checksum being recalculated in case of possible error.</t>

<artwork align="left">Server -&gt; Client
{
  &quot;number&quot;: 9,
  &quot;verb&quot; &quot;RESEND&quot;,
  &quot;data&quot;: 3
}

Client -&gt; Server
{
  &quot;number&quot;: 7,
  &quot;verb&quot; &quot;RESEND&quot;,
  &quot;data&quot;: 2
}
</artwork>
</section>
</section>

</middle>

<back>
<references><name>Normative References</name>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
<xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
</references>

</back>

</rfc>
